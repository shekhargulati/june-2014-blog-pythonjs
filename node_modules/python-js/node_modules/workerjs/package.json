{
  "name": "workerjs",
  "version": "0.1.1",
  "description": "Server Web Workers for node.js that work",
  "main": "index.js",
  "browser": "browser.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/eugeneware/workerjs"
  },
  "keywords": [
    "browserify",
    "worker",
    "webworker",
    "server",
    "client",
    "web"
  ],
  "author": {
    "name": "Eugene Ware",
    "email": "eugene@noblesamurai.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/eugeneware/workerjs/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "expect.js": "~0.2.0",
    "gamma": "~0.1.0",
    "mocha": "~1.16.2"
  },
  "readme": "# workerjs\n\nServer Web Workers for node.js that work.\n\n[![build status](https://secure.travis-ci.org/eugeneware/workerjs.png)](http://travis-ci.org/eugeneware/workerjs)\n\n## Installation\n\nThis module is installed via npm:\n\n``` bash\n$ npm install workerjs\n```\n\n## Background\n\nWeb Workers are part of the [HTML 5 spec](http://dev.w3.org/html5/workers/) and:\n\n> defines an API that allows Web application authors to spawn background workers\n> running scripts in parallel to their main page. This allows for thread-like\n> operation with message-passing as the coordination mechanism\n\nIn effect, it allows you to get the benefit of multi-talking and multi-threading\nin single-threaded Javascript, as well as the safety of the event loop.\n\nYou can achieve this in node.js using the [child_process.fork](http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options) method, but then\nyou have to use a different API.\n\nThis module normalizes the Web Worker API for server-side javascript in node.js\nwith the hopes that we can build more multi-tasking modules built on the\nWeb Worker standard that will work on both the server and the client-side\nusing [browserify](https://github.com/substack/node-browserify).\n\n## Example Usage\n\nBy using Web Workers you can do CPU-intensive operations **without** blocking\nthe event-loop and incoming IO:\n\n``` js\n// app.js - run with \"node app.js\"\nvar worker = new Worker('/path/to/fibworker.js');\nworker.onmessage = function (msg) {\n  expect(msg.data).to.equal(1346269);\n};\nworker.postMessage(30);\n```\n\n``` js\n// fibworker.js - CPU web worker code\nself.onmessage = function (msg) {\n  self.postMessage(fibo(msg.data));\n};\n\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n```\n\n## Node Mode - allowing require()\n\nI've also added a \"node-friendly\" option that allows the Web Worker to use\nrequire() and other node.js conventions. To use this, just pass a boolean\nvalue of `true` through to the second argument of the `Worker` contructor:\n\n``` js\n// app.js - run with \"node app.js\"\nvar worker = new Worker('/path/to/gammaworker.js', true);\nworker.addEventListener('message', function (msg) {\n  expect(msg.data).to.equal(87178291200.00021);\n  done();\n});\nworker.postMessage(15);\n```\n\n``` js\n// gammaworker.js - uses require\nvar gamma = require('gamma');\nself.onmessage = function (msg) {\n  postMessage(gamma(msg.data));\n};\n```\n\nAlso, if you provide a ```module.exports``` function it will be executed as\nan entry point of the web worker. This emulates the browserify transform\nbehaviour in [webworkify](https://github.com/substack/webworkify):\n\n``` js\n// app.js - run with \"node app.js\"\nvar worker = new Worker('/path/to/gammaworker2.js', true);\nworker.addEventListener('message', function (msg) {\n  expect(msg.data).to.equal(87178291200.00021);\n  done();\n});\nworker.postMessage(15);\n```\n\n``` js\n// gammaworker2.js - uses require\nvar gamma = require('gamma');\n\nmodule.exports = function () {\n  postMessage(gamma(msg.data));\n};\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/eugeneware/workerjs",
  "_id": "workerjs@0.1.1",
  "_shasum": "b7939ed54400937c1c1ef35b74b37dd9bbcbdde6",
  "_from": "workerjs@*",
  "_resolved": "https://registry.npmjs.org/workerjs/-/workerjs-0.1.1.tgz"
}
